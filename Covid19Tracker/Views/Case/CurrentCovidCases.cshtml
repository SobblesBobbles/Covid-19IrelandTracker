
@{
    ViewBag.Title = "CurrentCovidCases";
}

@model Covid19Tracker.Vm.CurrentCovidCasesOverview

<script src="~/Scripts/jquery-3.4.1.js"></script>

<style>

    #map
    {
        height: 400px;
        width:100%;
        margin-bottom: 10px;
    }
    .marker {
        background-image: url('https://vectorified.com/images/red-dot-icon-13.jpg');
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
    }
</style>

 
     
  


<div class="row" style="margin-top:2%;">
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Heat Map</h3>
            </div>
            <div class="panel-body">
                <div id="map"></div>
            </div>
        </div>


        @*<div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Panel title</h3>
            </div>
            <div class="panel-body">

            </div>
        </div>*@



    </div>
    <div class="col-md-6">


        <div class="panel panel-default">
            <div class="panel-heading"> Cases Breakdown:</div>

            <div class="panel-body">

                <table class="table" id="CovidCaseTable">
                    <thead>
                        <tr>
                            <th>Date Diagnosed:</th>
                            <th>Age Group</th>
                            <th>Gender: </th>
                            <th>Town</th>
                            <th>County</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var row in Model.CurrentCovidCases)
                        {
                            <tr>
                                <td>@row.DateDiagnosed</td>
                                <td>@row.AgeRange</td>
                                <td>@row.Gender</td>
                                <td>@row.Town</td>
                                <td>@row.County</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div> 




<script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>

<script src="https://www.amcharts.com/lib/4/core.js"></script>
<script src="https://www.amcharts.com/lib/4/charts.js"></script>
<script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

<script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic29iYmxlc2JvYmJsZXMiLCJhIjoiY2s4NHB0NnpkMTU5eTNob3c2ZnJzcDgzOSJ9.vFFaNLctNZHc841GvUxJBQ';
    mapboxgl.setRTLTextPlugin(
        'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'
    );


    var geojson = {
        type: 'FeatureCollection',
        features: [{
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: [-6.663, 53.217]
            },
            properties: {
                title: 'Mapbox',
                description: 'Washington, D.C.'
           
            }
        },
        {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: [-6.663, 53.217]
            },
            properties: {
                title: 'Mapbox',
                description: 'San Francisco, California'
            }
            },
           {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: [-8.663, 53.217]
            },
            properties: {
                title: 'Mapbox',
                description: 'San Francisco, California'
            }
            },
           {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: [-8.663, 53.217]
            },
            properties: {
                title: 'Mapbox',
                description: 'San Francisco, California'
            }
        }]
    };


    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/streets-v9', // stylesheet location
        center: [-6.663, 53.217], // starting position [lng, lat]
        zoom: 10 // starting zoom
    });


    //geojson.features.forEach(function(marker) {

    //  // create a HTML element for each feature
    //  var el = document.createElement('div');
    //  el.className = 'marker';

    //  // make a marker for each feature and add to the map
    //  new mapboxgl.Marker(el)
    //    .setLngLat(marker.geometry.coordinates)
    //    .addTo(map);
    //});


    ////////////////////////////////////////////////



    map.on('load', function () {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('cases', {
            type: 'geojson',
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
            data:geojson,
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'cases',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#FF0000',
                    100,
                    '#FF0000',
                    750,
                    '#FF0000'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'cases',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            }
        });

        map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'cases',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-color': '#FF0000',
                'circle-radius': 4,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', function (e) {
            var features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            var clusterId = features[0].properties.cluster_id;
            map.getSource('cases').getClusterExpansionZoom(
                clusterId,
                function (err, zoom) {
                    if (err) return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', function (e) {

            var coordinates = e.features[0].geometry.coordinates.slice();
            var mag = e.features[0].properties.mag;
            var tsunami;

            if (e.features[0].properties.tsunami === 1) {
                tsunami = 'yes'
            } else {
                tsunami = 'no'
            }

            // Ensure that if the map is zoomed out such that
            // multiple copies of the feature are visible, the
            // popup appears over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML("magnitude: " + mag + "<br>Was there a tsunami?: " + tsunami)
                .addTo(map);
        });

        map.on('mouseenter', 'clusters', function () {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', function () {
            map.getCanvas().style.cursor = '';
        });
    });

</script>
<script>


    var table = $('#CovidCaseTable').DataTable({
        "paging": true,
        "pageLength": 5,
        "dom": '<"top">ft<"bottom"p><"clear">'
    });
</script>