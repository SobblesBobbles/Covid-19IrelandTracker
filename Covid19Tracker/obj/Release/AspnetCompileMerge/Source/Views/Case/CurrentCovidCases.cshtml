
@{
    ViewBag.Title = "CurrentCovidCases";
}

@model Covid19Tracker.Vm.CurrentCovidCasesOverview

<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<style>

    #map
    {
        height: 400px;
        width:100%;
        margin-bottom: 10px;
    }
    .marker {
        background-image: url('https://vectorified.com/images/red-dot-icon-13.jpg');
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
    }
  #CovidCaseTable td, #CovidCaseTable th{
        width: auto !important;
        white-space: normal;
        text-overflow: ellipsis;
        overflow: hidden;
  }


    #CovidCaseTable td {
        padding: 0px 2px 0px 0px;
    }
    #CovidCaseTable th {
        font-size:small;
        text-align:left;
    }
    #CovidCaseTable {
          table-layout: fixed;
  width: 100% !important;
    }
table.dataTable thead .sorting, 
table.dataTable thead .sorting_asc, 
table.dataTable thead .sorting_desc {
    background : none;
}
</style>



<div class="row" style="margin-top:2%;">
    <div class="col-md-6">
        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Geo Location Dashboard</h3>
            </div>
            <div class="panel-body">
                <div id="map"></div>

                @*<div class="panel panel-default" style="padding-bottom:0px;">
                        <div class="panel-heading">Age Breakdown</div>
                        <div class="panel-body">
                            <div id="AgeBreakdown">
                            </div>
                        </div>
                    </div>*@

            </div>
        </div>

    </div>

    <div class="col-md-6">
        <div class="panel panel-info">
            <div class="panel-heading"> Cases Information:</div>
            <div class="panel-body">
                <table class="table" style="width: 100%; " id="CovidCaseTable">
                    <thead>
                        <tr>
                            <th>Diagnosed</th>
                            <th>Age</th>
                            <th>Gender </th>
                            <th>Town</th>
                            <th>County</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.CurrentCovidCases)
                        {
                            <tr>
                                <td>@row.DateDiagnosed.Day/@row.DateDiagnosed.Month/@row.DateDiagnosed.Year</td>
                                <td>@row.AgeRange</td>
                                <td>@row.Gender</td>
                                <td>@row.Town</td>
                                <td>@row.County</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>

        </div>

    </div>

    </div>
<div class="row">
    <div class="col-md-6  ">
        <div class="panel panel-info" style="margin-top: 2%;">
            <div class="panel-heading">Case Breakdown</div>
            <div class="panel-body">
                <div id="CaseBreakdown" style="width:100%;">
                </div>
                <div id="AgeBreakdown">
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="panel panel-info" style="margin-top:2%; ">
            <div class="panel-heading">Town Breakdown</div>
            <div class="panel-body">
                <div style="height:350px;" id="TownBreakdown">
                </div>

            </div>
        </div>

    </div>
 </div>



<script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
<script src="https://www.amcharts.com/lib/4/core.js"></script>
<script src="https://www.amcharts.com/lib/4/charts.js"></script>
<script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

<script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic29iYmxlc2JvYmJsZXMiLCJhIjoiY2s4NHB0NnpkMTU5eTNob3c2ZnJzcDgzOSJ9.vFFaNLctNZHc841GvUxJBQ';
    mapboxgl.setRTLTextPlugin(
        'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'
    );
    var cases= @Html.Raw(Json.Encode(Model.CurrentCovidCases));
    var NumberOfCases = @Model.CurrentCovidCases.Count;
    var Features = [];
    for(var i=0; i < NumberOfCases; i++){
        var item = cases[i];

        
                  Features.push({
                    "type": 'Feature',
                    "geometry": {
                        "type": 'Point',
                        "coordinates": [item.Longitude, item.Latitude]
                    },
                    "properties": {
                        "title": 'Mapbox',
                        "town": item.Town,
                        "Case": item.CaseType
                
                
                    }
                 });
       
  
    }

    var geojson = {
        type: 'FeatureCollection',
        features : Features
    };
    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/streets-v9', // stylesheet location
        center: [-6.663, 53.217], // starting position [lng, lat]
        zoom: 10 // starting zoom
    });

    ////////////////////////////////////////////////

    map.on('load', function () {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('cases', {
            type: 'geojson',
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
            data:geojson,
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'cases',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#FF0000',
                    100,
                    '#FF0000',
                    750,
                    '#FF0000'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'cases',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            }
        });

        map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'cases',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-color': '#FF0000',
                'circle-radius': 4,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', function (e) {
            var features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            var clusterId = features[0].properties.cluster_id;
            map.getSource('cases').getClusterExpansionZoom(
                clusterId,
                function (err, zoom) {
                    if (err) return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', function (e) {

            console.log("/////");
            var coordinates = e.features[0].geometry.coordinates.slice();
            var town = e.features[0].properties.town;
            var Confirmed = 0;
            var AwaitingResults = 0;
            var AwaitingTest = 0;
            var InTown = 0;
             cases.map(function (item) {
                 console.log(item);
                    if (item.Town == town) {
                        InTown++;
                        if (item.CaseType == "Confirmed") {
                            Confirmed++;
                        }
                        if (item.CaseType == "Awaiting Results") {
                            AwaitingResults++;
                        }
                          if (item.CaseType == "Awaiting Test") {
                            AwaitingResults++;
                        }
                    }
           });
         
       
         
            // Ensure that if the map is zoomed out such that
            // multiple copies of the feature are visible, the
            // popup appears over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(town + ":<br> " + "Confirmed:" + Confirmed + "<br> Awaiting Results :" + AwaitingResults + "<br> Awaiting Testing : " + AwaitingTest)
                .addTo(map);
            InTown = 0;
            AwaitingResults = 0;
            Confirmed = 0;
        });

        map.on('mouseenter', 'clusters', function () {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', function () {
            map.getCanvas().style.cursor = '';
        });
    });

</script>
<script>

    // AGE BREAKDOWN
    var AgeData = @Html.Raw(Model.AgeBreakdown);


    var Agechart = am4core.create("AgeBreakdown", am4charts.PieChart);
    Agechart.data = AgeData;
    console.log(Agechart.data);

    let Agecharttitle = Agechart.titles.create();
        Agecharttitle.text = "Ages";
        Agecharttitle.fontSize = 15;
        Agecharttitle.marginBottom = 2;

   // AgeBreakdown
    var pieSeries = Agechart.series.push(new am4charts.PieSeries());
        pieSeries.dataFields.value = "NumberOfCases";
        pieSeries.dataFields.category = "AgeGroup";
        pieSeries.slices.template.stroke = am4core.color("#fff");
        pieSeries.slices.template.strokeWidth = 2;
        pieSeries.slices.template.strokeOpacity = 1;
        pieSeries.hiddenState.properties.opacity = 1;
        pieSeries.hiddenState.properties.endAngle = -90;
        pieSeries.hiddenState.properties.startAngle = -90;



  

 
    ///////



        var Casechart = am4core.create("CaseBreakdown", am4charts.PieChart);
            Casechart.data = @Html.Raw(Model.CaseBreakdown);
            Casechart.autoMargins = true;
            Casechart.cursor = new am4charts.XYCursor();
        var pieSeries = Casechart.series.push(new am4charts.PieSeries());
            pieSeries.dataFields.value = "NumberOfCases";
            pieSeries.dataFields.category = "CaseType";
            pieSeries.responsive.enabled = true;
            pieSeries.labels.template.text = "dsfsdf";


            let CaseTypeTitle = Casechart.titles.create();
                CaseTypeTitle.text = "Case Types";
                CaseTypeTitle.fontSize = 15;
                CaseTypeTitle.marginBottom = 2;
    //////
    
    function stringToDatestamp(dateString) {

       // var Date = moment.utc(dateString).format('DD/MM/YYYY');
        return dateString;
       
    }

    var table = $('#CovidCaseTable').DataTable({
        "paging": true,
        "pageLength": 15,
        "dom": '<"top">ft<"bottom"p><"clear">',
        "columnDefs": [
            {
                "targets": [0],
                "render": function (data, type, row) {
                    if (null == data) {
                         return "";
                    }
                       
                    return stringToDatestamp(data);
                }
            }
]
    });
</script>

<script>

    // Case Chart for Places



    var TownChart = am4core.create('TownBreakdown', am4charts.XYChart)
    TownChart.colors.step = 2;

    TownChart.legend = new am4charts.Legend();
    TownChart.legend.useDefaultMarker = true;
    let marker = TownChart.legend.markers.template.children.getIndex(0);
    marker.cornerRadius(12, 12, 12, 12);
    marker.strokeWidth = 2;
    marker.strokeOpacity = 1;
    marker.stroke = am4core.color("#ccc");



    var xAxis = TownChart.xAxes.push(new am4charts.CategoryAxis())
    xAxis.dataFields.category = 'Town'
    xAxis.renderer.cellStartLocation = 0.1
    xAxis.renderer.cellEndLocation = 0.9
    xAxis.renderer.grid.template.location = 0;
    xAxis.renderer.minGridDistance = 20;

    var yAxis = TownChart.yAxes.push(new am4charts.ValueAxis());
    yAxis.min = 0;

    function createSeries(value, name) {
        var series = TownChart.series.push(new am4charts.ColumnSeries())
        series.dataFields.valueY = value;
        series.dataFields.categoryX = 'Town';
        series.name = name;

        //series.events.on("hidden", arrangeColumns);
        series.events.on("shown", arrangeColumns);

        var bullet = series.bullets.push(new am4charts.LabelBullet())
        bullet.interactionsEnabled = true
        bullet.dy = 15;
        bullet.label.text = '{valueY}'
        bullet.label.fill = am4core.color('#ffffff')

        return series;
    }

      TownChart.data = @Html.Raw(Model.TownBreakdown);
    //TownChart.data = [
    //    {
    //        Town: 'Place #1',
    //        Confirmed: 40,
    //        AwaitingResults: 55,
    //        AwaitingTesting: 60
    //    },
    //    {
    //        Town: 'Place #2',
    //        Confirmed: 30,
    //        AwaitingResults: 78,
    //        AwaitingTesting: 69
    //    },
    //    {
    //        Town: 'Place #3',
    //        Confirmed: 27,
    //        AwaitingResults: 40,
    //        AwaitingTesting: 45
    //    },
    //    {
    //        Town: 'Place #4',
    //        Confirmed: 50,
    //        AwaitingResults: 33,
    //        AwaitingTesting: 22
    //    }
    //]


    createSeries('Confirmed', 'Confirmed');
    createSeries('AwaitingResults', 'Awaiting Results');
    createSeries('AwaitingTesting', 'Awaiting Test');

    function arrangeColumns() {

        //var series = TownChart.series.getIndex(0);

        //var w = 1 - xAxis.renderer.cellStartLocation - (1 - xAxis.renderer.cellEndLocation);
        //if (series.dataItems.length > 1) {
        //    var x0 = xAxis.getX(series.dataItems.getIndex(0), "categoryX");
        //    var x1 = xAxis.getX(series.dataItems.getIndex(1), "categoryX");
        //    var delta = ((x1 - x0) / chart.series.length) * w;
        //    if (am4core.isNumber(delta)) {
        //        var middle = TownChart.series.length / 2;

        //        var newIndex = 0;
        //        chart.series.each(function (series) {
        //            if (!series.isHidden && !series.isHiding) {
        //                series.dummyData = newIndex;
        //                newIndex++;
        //            }
        //            else {
        //                series.dummyData = TownChart.series.indexOf(series);
        //            }
        //        })
        //        var visibleCount = newIndex;
        //        var newMiddle = visibleCount / 2;

        //        chart.series.each(function (series) {
        //            var trueIndex = TownChart.series.indexOf(series);
        //            var newIndex = series.dummyData;

        //            var dx = (newIndex - trueIndex + middle - newMiddle) * delta

        //            series.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
        //            series.bulletsContainer.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
        //        })
        //    }
        //}
    }



</script>